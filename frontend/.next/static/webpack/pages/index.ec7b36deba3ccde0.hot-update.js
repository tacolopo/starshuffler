"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./utils/zkProof.js":
/*!**************************!*\
  !*** ./utils/zkProof.js ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateProof: function() { return /* binding */ generateProof; }\n/* harmony export */ });\n/* harmony import */ var snarkjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! snarkjs */ \"./node_modules/snarkjs/build/browser.esm.js\");\n\nconst generateProof = async (secret, root, nullifierHash, recipient)=>{\n    try {\n        // Convert inputs to appropriate format\n        const secretBigInt = BigInt(\"0x\" + secret);\n        const rootBigInt = BigInt(root);\n        const nullifierHashBigInt = BigInt(nullifierHash);\n        const recipientBigInt = BigInt(recipient.replace(\"juno\", \"0x\"));\n        // Input for the circuit\n        const input = {\n            secret: secretBigInt.toString(),\n            root: rootBigInt.toString(),\n            nullifierHash: nullifierHashBigInt.toString(),\n            recipient: recipientBigInt.toString()\n        };\n        console.log(\"Proof inputs:\", input);\n        // Load the circuit\n        const { proof, publicSignals } = await snarkjs__WEBPACK_IMPORTED_MODULE_0__.groth16.fullProve(input, \"/circuits/merkleproof.wasm\", \"/circuits/merkleproof_final.zkey\");\n        // Convert the proof to the format expected by the contract\n        const proofForContract = [\n            proof.pi_a[0],\n            proof.pi_a[1],\n            proof.pi_b[0][0],\n            proof.pi_b[0][1],\n            proof.pi_b[1][0],\n            proof.pi_b[1][1],\n            proof.pi_c[0],\n            proof.pi_c[1]\n        ].map((x)=>x.toString());\n        return proofForContract;\n    } catch (error) {\n        console.error(\"Error generating proof:\", error);\n        throw new Error(\"Failed to generate zero-knowledge proof\");\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy96a1Byb29mLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtDO0FBRTNCLE1BQU1DLGdCQUFnQixPQUFPQyxRQUFRQyxNQUFNQyxlQUFlQztJQUMvRCxJQUFJO1FBQ0YsdUNBQXVDO1FBQ3ZDLE1BQU1DLGVBQWVDLE9BQU8sT0FBT0w7UUFDbkMsTUFBTU0sYUFBYUQsT0FBT0o7UUFDMUIsTUFBTU0sc0JBQXNCRixPQUFPSDtRQUNuQyxNQUFNTSxrQkFBa0JILE9BQU9GLFVBQVVNLE9BQU8sQ0FBQyxRQUFRO1FBRXpELHdCQUF3QjtRQUN4QixNQUFNQyxRQUFRO1lBQ1pWLFFBQVFJLGFBQWFPLFFBQVE7WUFDN0JWLE1BQU1LLFdBQVdLLFFBQVE7WUFDekJULGVBQWVLLG9CQUFvQkksUUFBUTtZQUMzQ1IsV0FBV0ssZ0JBQWdCRyxRQUFRO1FBQ3JDO1FBRUFDLFFBQVFDLEdBQUcsQ0FBQyxpQkFBaUJIO1FBRTdCLG1CQUFtQjtRQUNuQixNQUFNLEVBQUVJLEtBQUssRUFBRUMsYUFBYSxFQUFFLEdBQUcsTUFBTWpCLDRDQUFPQSxDQUFDa0IsU0FBUyxDQUN0RE4sT0FDQSw4QkFDQTtRQUdGLDJEQUEyRDtRQUMzRCxNQUFNTyxtQkFBbUI7WUFDdkJILE1BQU1JLElBQUksQ0FBQyxFQUFFO1lBQ2JKLE1BQU1JLElBQUksQ0FBQyxFQUFFO1lBQ2JKLE1BQU1LLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNoQkwsTUFBTUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2hCTCxNQUFNSyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDaEJMLE1BQU1LLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNoQkwsTUFBTU0sSUFBSSxDQUFDLEVBQUU7WUFDYk4sTUFBTU0sSUFBSSxDQUFDLEVBQUU7U0FDZCxDQUFDQyxHQUFHLENBQUNDLENBQUFBLElBQUtBLEVBQUVYLFFBQVE7UUFFckIsT0FBT007SUFDVCxFQUFFLE9BQU9NLE9BQU87UUFDZFgsUUFBUVcsS0FBSyxDQUFDLDJCQUEyQkE7UUFDekMsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi91dGlscy96a1Byb29mLmpzPzQ2ZDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ3JvdGgxNiB9IGZyb20gJ3NuYXJranMnO1xuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVQcm9vZiA9IGFzeW5jIChzZWNyZXQsIHJvb3QsIG51bGxpZmllckhhc2gsIHJlY2lwaWVudCkgPT4ge1xuICB0cnkge1xuICAgIC8vIENvbnZlcnQgaW5wdXRzIHRvIGFwcHJvcHJpYXRlIGZvcm1hdFxuICAgIGNvbnN0IHNlY3JldEJpZ0ludCA9IEJpZ0ludCgnMHgnICsgc2VjcmV0KTtcbiAgICBjb25zdCByb290QmlnSW50ID0gQmlnSW50KHJvb3QpO1xuICAgIGNvbnN0IG51bGxpZmllckhhc2hCaWdJbnQgPSBCaWdJbnQobnVsbGlmaWVySGFzaCk7XG4gICAgY29uc3QgcmVjaXBpZW50QmlnSW50ID0gQmlnSW50KHJlY2lwaWVudC5yZXBsYWNlKCdqdW5vJywgJzB4JykpO1xuXG4gICAgLy8gSW5wdXQgZm9yIHRoZSBjaXJjdWl0XG4gICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICBzZWNyZXQ6IHNlY3JldEJpZ0ludC50b1N0cmluZygpLFxuICAgICAgcm9vdDogcm9vdEJpZ0ludC50b1N0cmluZygpLFxuICAgICAgbnVsbGlmaWVySGFzaDogbnVsbGlmaWVySGFzaEJpZ0ludC50b1N0cmluZygpLFxuICAgICAgcmVjaXBpZW50OiByZWNpcGllbnRCaWdJbnQudG9TdHJpbmcoKSxcbiAgICB9O1xuXG4gICAgY29uc29sZS5sb2coJ1Byb29mIGlucHV0czonLCBpbnB1dCk7XG5cbiAgICAvLyBMb2FkIHRoZSBjaXJjdWl0XG4gICAgY29uc3QgeyBwcm9vZiwgcHVibGljU2lnbmFscyB9ID0gYXdhaXQgZ3JvdGgxNi5mdWxsUHJvdmUoXG4gICAgICBpbnB1dCxcbiAgICAgIFwiL2NpcmN1aXRzL21lcmtsZXByb29mLndhc21cIixcbiAgICAgIFwiL2NpcmN1aXRzL21lcmtsZXByb29mX2ZpbmFsLnprZXlcIlxuICAgICk7XG5cbiAgICAvLyBDb252ZXJ0IHRoZSBwcm9vZiB0byB0aGUgZm9ybWF0IGV4cGVjdGVkIGJ5IHRoZSBjb250cmFjdFxuICAgIGNvbnN0IHByb29mRm9yQ29udHJhY3QgPSBbXG4gICAgICBwcm9vZi5waV9hWzBdLFxuICAgICAgcHJvb2YucGlfYVsxXSxcbiAgICAgIHByb29mLnBpX2JbMF1bMF0sXG4gICAgICBwcm9vZi5waV9iWzBdWzFdLFxuICAgICAgcHJvb2YucGlfYlsxXVswXSxcbiAgICAgIHByb29mLnBpX2JbMV1bMV0sXG4gICAgICBwcm9vZi5waV9jWzBdLFxuICAgICAgcHJvb2YucGlfY1sxXSxcbiAgICBdLm1hcCh4ID0+IHgudG9TdHJpbmcoKSk7XG5cbiAgICByZXR1cm4gcHJvb2ZGb3JDb250cmFjdDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIHByb29mOicsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZW5lcmF0ZSB6ZXJvLWtub3dsZWRnZSBwcm9vZicpO1xuICB9XG59OyAiXSwibmFtZXMiOlsiZ3JvdGgxNiIsImdlbmVyYXRlUHJvb2YiLCJzZWNyZXQiLCJyb290IiwibnVsbGlmaWVySGFzaCIsInJlY2lwaWVudCIsInNlY3JldEJpZ0ludCIsIkJpZ0ludCIsInJvb3RCaWdJbnQiLCJudWxsaWZpZXJIYXNoQmlnSW50IiwicmVjaXBpZW50QmlnSW50IiwicmVwbGFjZSIsImlucHV0IiwidG9TdHJpbmciLCJjb25zb2xlIiwibG9nIiwicHJvb2YiLCJwdWJsaWNTaWduYWxzIiwiZnVsbFByb3ZlIiwicHJvb2ZGb3JDb250cmFjdCIsInBpX2EiLCJwaV9iIiwicGlfYyIsIm1hcCIsIngiLCJlcnJvciIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./utils/zkProof.js\n"));

/***/ })

});